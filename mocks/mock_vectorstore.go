// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sevigo/code-warden/internal/storage (interfaces: VectorStore)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_vectorstore.go -package=mocks github.com/sevigo/code-warden/internal/storage VectorStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	schema "github.com/sevigo/goframe/schema"
	qdrant "github.com/sevigo/goframe/vectorstores/qdrant"
	gomock "go.uber.org/mock/gomock"
)

// MockVectorStore is a mock of VectorStore interface.
type MockVectorStore struct {
	ctrl     *gomock.Controller
	recorder *MockVectorStoreMockRecorder
	isgomock struct{}
}

// MockVectorStoreMockRecorder is the mock recorder for MockVectorStore.
type MockVectorStoreMockRecorder struct {
	mock *MockVectorStore
}

// NewMockVectorStore creates a new mock instance.
func NewMockVectorStore(ctrl *gomock.Controller) *MockVectorStore {
	mock := &MockVectorStore{ctrl: ctrl}
	mock.recorder = &MockVectorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorStore) EXPECT() *MockVectorStoreMockRecorder {
	return m.recorder
}

// AddDocumentsBatch mocks base method.
func (m *MockVectorStore) AddDocumentsBatch(ctx context.Context, collectionName, embedderModelName string, docs []schema.Document, progressFn func(int, int, time.Duration)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentsBatch", ctx, collectionName, embedderModelName, docs, progressFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDocumentsBatch indicates an expected call of AddDocumentsBatch.
func (mr *MockVectorStoreMockRecorder) AddDocumentsBatch(ctx, collectionName, embedderModelName, docs, progressFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentsBatch", reflect.TypeOf((*MockVectorStore)(nil).AddDocumentsBatch), ctx, collectionName, embedderModelName, docs, progressFn)
}

// DeleteCollection mocks base method.
func (m *MockVectorStore) DeleteCollection(ctx context.Context, collectionName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, collectionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockVectorStoreMockRecorder) DeleteCollection(ctx, collectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockVectorStore)(nil).DeleteCollection), ctx, collectionName)
}

// DeleteDocuments mocks base method.
func (m *MockVectorStore) DeleteDocuments(ctx context.Context, collectionName, embedderModelName string, documentIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocuments", ctx, collectionName, embedderModelName, documentIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocuments indicates an expected call of DeleteDocuments.
func (mr *MockVectorStoreMockRecorder) DeleteDocuments(ctx, collectionName, embedderModelName, documentIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocuments", reflect.TypeOf((*MockVectorStore)(nil).DeleteDocuments), ctx, collectionName, embedderModelName, documentIDs)
}

// DeleteDocumentsByFilter mocks base method.
func (m *MockVectorStore) DeleteDocumentsByFilter(ctx context.Context, collectionName, embedderModelName string, filters map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocumentsByFilter", ctx, collectionName, embedderModelName, filters)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocumentsByFilter indicates an expected call of DeleteDocumentsByFilter.
func (mr *MockVectorStoreMockRecorder) DeleteDocumentsByFilter(ctx, collectionName, embedderModelName, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentsByFilter", reflect.TypeOf((*MockVectorStore)(nil).DeleteDocumentsByFilter), ctx, collectionName, embedderModelName, filters)
}

// SetBatchConfig mocks base method.
func (m *MockVectorStore) SetBatchConfig(config qdrant.BatchConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatchConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatchConfig indicates an expected call of SetBatchConfig.
func (mr *MockVectorStoreMockRecorder) SetBatchConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatchConfig", reflect.TypeOf((*MockVectorStore)(nil).SetBatchConfig), config)
}

// SimilaritySearch mocks base method.
func (m *MockVectorStore) SimilaritySearch(ctx context.Context, collectionName, embedderModelName, query string, numDocs int) ([]schema.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimilaritySearch", ctx, collectionName, embedderModelName, query, numDocs)
	ret0, _ := ret[0].([]schema.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimilaritySearch indicates an expected call of SimilaritySearch.
func (mr *MockVectorStoreMockRecorder) SimilaritySearch(ctx, collectionName, embedderModelName, query, numDocs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimilaritySearch", reflect.TypeOf((*MockVectorStore)(nil).SimilaritySearch), ctx, collectionName, embedderModelName, query, numDocs)
}

// SimilaritySearchBatch mocks base method.
func (m *MockVectorStore) SimilaritySearchBatch(ctx context.Context, collectionName, embedderModelName string, queries []string, numDocs int) ([][]schema.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimilaritySearchBatch", ctx, collectionName, embedderModelName, queries, numDocs)
	ret0, _ := ret[0].([][]schema.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimilaritySearchBatch indicates an expected call of SimilaritySearchBatch.
func (mr *MockVectorStoreMockRecorder) SimilaritySearchBatch(ctx, collectionName, embedderModelName, queries, numDocs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimilaritySearchBatch", reflect.TypeOf((*MockVectorStore)(nil).SimilaritySearchBatch), ctx, collectionName, embedderModelName, queries, numDocs)
}
