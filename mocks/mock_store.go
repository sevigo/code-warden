// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sevigo/code-warden/internal/storage (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_store.go -package=mocks github.com/sevigo/code-warden/internal/storage Store
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/sevigo/code-warden/internal/core"
	storage "github.com/sevigo/code-warden/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockStore) CreateRepository(ctx context.Context, repo *storage.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockStoreMockRecorder) CreateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockStore)(nil).CreateRepository), ctx, repo)
}

// GetAllRepositories mocks base method.
func (m *MockStore) GetAllRepositories(ctx context.Context) ([]*storage.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepositories", ctx)
	ret0, _ := ret[0].([]*storage.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepositories indicates an expected call of GetAllRepositories.
func (mr *MockStoreMockRecorder) GetAllRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepositories", reflect.TypeOf((*MockStore)(nil).GetAllRepositories), ctx)
}

// GetAllReviewsForPR mocks base method.
func (m *MockStore) GetAllReviewsForPR(ctx context.Context, repoFullName string, prNumber int) ([]*core.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReviewsForPR", ctx, repoFullName, prNumber)
	ret0, _ := ret[0].([]*core.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviewsForPR indicates an expected call of GetAllReviewsForPR.
func (mr *MockStoreMockRecorder) GetAllReviewsForPR(ctx, repoFullName, prNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviewsForPR", reflect.TypeOf((*MockStore)(nil).GetAllReviewsForPR), ctx, repoFullName, prNumber)
}

// GetLatestReviewForPR mocks base method.
func (m *MockStore) GetLatestReviewForPR(ctx context.Context, repoFullName string, prNumber int) (*core.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestReviewForPR", ctx, repoFullName, prNumber)
	ret0, _ := ret[0].(*core.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestReviewForPR indicates an expected call of GetLatestReviewForPR.
func (mr *MockStoreMockRecorder) GetLatestReviewForPR(ctx, repoFullName, prNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestReviewForPR", reflect.TypeOf((*MockStore)(nil).GetLatestReviewForPR), ctx, repoFullName, prNumber)
}

// GetRepositoryByClonePath mocks base method.
func (m *MockStore) GetRepositoryByClonePath(ctx context.Context, clonePath string) (*storage.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByClonePath", ctx, clonePath)
	ret0, _ := ret[0].(*storage.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByClonePath indicates an expected call of GetRepositoryByClonePath.
func (mr *MockStoreMockRecorder) GetRepositoryByClonePath(ctx, clonePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByClonePath", reflect.TypeOf((*MockStore)(nil).GetRepositoryByClonePath), ctx, clonePath)
}

// GetRepositoryByFullName mocks base method.
func (m *MockStore) GetRepositoryByFullName(ctx context.Context, fullName string) (*storage.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByFullName", ctx, fullName)
	ret0, _ := ret[0].(*storage.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByFullName indicates an expected call of GetRepositoryByFullName.
func (mr *MockStoreMockRecorder) GetRepositoryByFullName(ctx, fullName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByFullName", reflect.TypeOf((*MockStore)(nil).GetRepositoryByFullName), ctx, fullName)
}

// SaveReview mocks base method.
func (m *MockStore) SaveReview(ctx context.Context, review *core.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveReview indicates an expected call of SaveReview.
func (mr *MockStoreMockRecorder) SaveReview(ctx, review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReview", reflect.TypeOf((*MockStore)(nil).SaveReview), ctx, review)
}

// UpdateRepository mocks base method.
func (m *MockStore) UpdateRepository(ctx context.Context, repo *storage.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockStoreMockRecorder) UpdateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockStore)(nil).UpdateRepository), ctx, repo)
}
