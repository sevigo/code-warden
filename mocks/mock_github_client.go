// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sevigo/code-warden/internal/github (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_github_client.go -package=mocks . Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v73/github"
	github0 "github.com/sevigo/code-warden/internal/github"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCheckRun mocks base method.
func (m *MockClient) CreateCheckRun(ctx context.Context, owner, repo string, opts github.CreateCheckRunOptions) (*github.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckRun", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckRun indicates an expected call of CreateCheckRun.
func (mr *MockClientMockRecorder) CreateCheckRun(ctx, owner, repo, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckRun", reflect.TypeOf((*MockClient)(nil).CreateCheckRun), ctx, owner, repo, opts)
}

// CreateComment mocks base method.
func (m *MockClient) CreateComment(ctx context.Context, owner, repo string, number int, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, number, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClientMockRecorder) CreateComment(ctx, owner, repo, number, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), ctx, owner, repo, number, body)
}

// CreateReview mocks base method.
func (m *MockClient) CreateReview(ctx context.Context, owner, repo string, number int, body string, comments []github0.DraftReviewComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, owner, repo, number, body, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockClientMockRecorder) CreateReview(ctx, owner, repo, number, body, comments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockClient)(nil).CreateReview), ctx, owner, repo, number, body, comments)
}

// GetChangedFiles mocks base method.
func (m *MockClient) GetChangedFiles(ctx context.Context, owner, repo string, number int) ([]github0.ChangedFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangedFiles", ctx, owner, repo, number)
	ret0, _ := ret[0].([]github0.ChangedFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangedFiles indicates an expected call of GetChangedFiles.
func (mr *MockClientMockRecorder) GetChangedFiles(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangedFiles", reflect.TypeOf((*MockClient)(nil).GetChangedFiles), ctx, owner, repo, number)
}

// GetPullRequest mocks base method.
func (m *MockClient) GetPullRequest(ctx context.Context, owner, repo string, number int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockClientMockRecorder) GetPullRequest(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockClient)(nil).GetPullRequest), ctx, owner, repo, number)
}

// GetPullRequestDiff mocks base method.
func (m *MockClient) GetPullRequestDiff(ctx context.Context, owner, repo string, number int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestDiff", ctx, owner, repo, number)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestDiff indicates an expected call of GetPullRequestDiff.
func (mr *MockClientMockRecorder) GetPullRequestDiff(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestDiff", reflect.TypeOf((*MockClient)(nil).GetPullRequestDiff), ctx, owner, repo, number)
}

// UpdateCheckRun mocks base method.
func (m *MockClient) UpdateCheckRun(ctx context.Context, owner, repo string, checkRunID int64, opts github.UpdateCheckRunOptions) (*github.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckRun", ctx, owner, repo, checkRunID, opts)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCheckRun indicates an expected call of UpdateCheckRun.
func (mr *MockClientMockRecorder) UpdateCheckRun(ctx, owner, repo, checkRunID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckRun", reflect.TypeOf((*MockClient)(nil).UpdateCheckRun), ctx, owner, repo, checkRunID, opts)
}
