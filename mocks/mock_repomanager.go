// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sevigo/code-warden/internal/repomanager (interfaces: RepoManager)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_repomanager.go -package=mocks github.com/sevigo/code-warden/internal/repomanager RepoManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/sevigo/code-warden/internal/core"
	storage "github.com/sevigo/code-warden/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoManager is a mock of RepoManager interface.
type MockRepoManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerMockRecorder
	isgomock struct{}
}

// MockRepoManagerMockRecorder is the mock recorder for MockRepoManager.
type MockRepoManagerMockRecorder struct {
	mock *MockRepoManager
}

// NewMockRepoManager creates a new mock instance.
func NewMockRepoManager(ctrl *gomock.Controller) *MockRepoManager {
	mock := &MockRepoManager{ctrl: ctrl}
	mock.recorder = &MockRepoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoManager) EXPECT() *MockRepoManagerMockRecorder {
	return m.recorder
}

// GetRepoRecord mocks base method.
func (m *MockRepoManager) GetRepoRecord(ctx context.Context, repoFullName string) (*storage.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoRecord", ctx, repoFullName)
	ret0, _ := ret[0].(*storage.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoRecord indicates an expected call of GetRepoRecord.
func (mr *MockRepoManagerMockRecorder) GetRepoRecord(ctx, repoFullName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoRecord", reflect.TypeOf((*MockRepoManager)(nil).GetRepoRecord), ctx, repoFullName)
}

// ScanLocalRepo mocks base method.
func (m *MockRepoManager) ScanLocalRepo(ctx context.Context, repoPath, repoFullName string, force bool) (*core.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanLocalRepo", ctx, repoPath, repoFullName, force)
	ret0, _ := ret[0].(*core.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanLocalRepo indicates an expected call of ScanLocalRepo.
func (mr *MockRepoManagerMockRecorder) ScanLocalRepo(ctx, repoPath, repoFullName, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanLocalRepo", reflect.TypeOf((*MockRepoManager)(nil).ScanLocalRepo), ctx, repoPath, repoFullName, force)
}

// SyncRepo mocks base method.
func (m *MockRepoManager) SyncRepo(ctx context.Context, event *core.GitHubEvent, token string) (*core.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRepo", ctx, event, token)
	ret0, _ := ret[0].(*core.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncRepo indicates an expected call of SyncRepo.
func (mr *MockRepoManagerMockRecorder) SyncRepo(ctx, event, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRepo", reflect.TypeOf((*MockRepoManager)(nil).SyncRepo), ctx, event, token)
}

// UpdateRepoSHA mocks base method.
func (m *MockRepoManager) UpdateRepoSHA(ctx context.Context, repoFullName, newSHA string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoSHA", ctx, repoFullName, newSHA)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoSHA indicates an expected call of UpdateRepoSHA.
func (mr *MockRepoManagerMockRecorder) UpdateRepoSHA(ctx, repoFullName, newSHA any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoSHA", reflect.TypeOf((*MockRepoManager)(nil).UpdateRepoSHA), ctx, repoFullName, newSHA)
}
